import pygame
import random
import os
from heapq import heappush, heappop

# Fenstergr√∂√üe
WIDTH = 600
HEIGHT = 400
GRID_SIZE = 20
ROWS = HEIGHT // GRID_SIZE
COLS = WIDTH // GRID_SIZE
TOTAL_CELLS = ROWS * COLS

# Farben (RGB)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)

# Richtungsvorgaben
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

class SnakeGame:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption("Snake üêç")
        self.clock = pygame.time.Clock()

        self.reset_game()
        self.highscores = self.load_highscores()
        self.coverage_history = self.load_coverage_history()

        self.manual_button_rect = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2 - 40, 200, 40)
        self.auto_button_rect = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2 + 10, 200, 40)
        self.restart_button_rect = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2 + 60, 200, 40)

    def reset_game(self):
        self.running = True
        self.score = 0
        self.path = self.generate_snake_path()
        self.snake = [self.path[0]]
        self.food = self.spawn_food()
        self.direction = RIGHT
        self.game_over = False
        self.path_index = 0
        self.max_length = 1
        self.safe_mode = False  # Flag f√ºr sicheren Modus

    def spawn_food(self):
        while True:
            food_pos = (random.randint(0, COLS-1) * GRID_SIZE, 
                       random.randint(0, ROWS-1) * GRID_SIZE)
            if food_pos not in self.snake:
                return food_pos

    def load_highscores(self):
        if os.path.exists("highscores.txt"):
            with open("highscores.txt", "r") as file:
                scores = [int(line.strip()) for line in file.readlines() if line.strip()]
                return sorted(scores, reverse=True)[:5]
        return [0] * 5

    def save_highscores(self):
        self.highscores.append(self.score)
        self.highscores = sorted(self.highscores, reverse=True)[:5]
        with open("highscores.txt", "w") as file:
            for score in self.highscores:
                file.write(f"{score}\n")

    def load_coverage_history(self):
        if os.path.exists("coverage_history.txt"):
            with open("coverage_history.txt", "r") as file:
                history = [float(line.strip()) for line in file.readlines() if line.strip()]
                return history[-10:]
        return []

    def save_coverage_history(self):
        coverage = (self.max_length / TOTAL_CELLS) * 100
        self.coverage_history.append(coverage)
        if len(self.coverage_history) > 10:
            self.coverage_history.pop(0)
        with open("coverage_history.txt", "w") as file:
            for cov in self.coverage_history:
                file.write(f"{cov}\n")

    def get_average_coverage(self):
        if not self.coverage_history:
            return 0.0
        return sum(self.coverage_history) / len(self.coverage_history)

    def generate_snake_path(self):
        path = []
        for row in range(ROWS):
            if row % 2 == 0:
                for col in range(COLS):
                    path.append((col * GRID_SIZE, row * GRID_SIZE))
            else:
                for col in reversed(range(COLS)):
                    path.append((col * GRID_SIZE, row * GRID_SIZE))
        return path

    def heuristic(self, pos1, pos2):
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

    def get_neighbors(self, pos):
        x, y = pos
        return [
            (x + GRID_SIZE, y),
            (x - GRID_SIZE, y),
            (x, y + GRID_SIZE),
            (x, y - GRID_SIZE)
        ]

    def a_star(self, start, goal):
        open_set = []
        heappush(open_set, (0, start))
        came_from = {}
        g_score = {start: 0}
        f_score = {start: self.heuristic(start, goal)}

        while open_set:
            current = heappop(open_set)[1]
            if current == goal:
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(start)
                return path[::-1]

            for neighbor in self.get_neighbors(current):
                if (neighbor[0] < 0 or neighbor[0] >= WIDTH or
                    neighbor[1] < 0 or neighbor[1] >= HEIGHT or
                    neighbor in self.snake[1:]):
                    continue

                tentative_g_score = g_score[current] + GRID_SIZE
                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + self.heuristic(neighbor, goal)
                    heappush(open_set, (f_score[neighbor], neighbor))
        return None

    def follow_tail(self, head):
        tail = self.snake[-1]
        best_neighbor = None
        min_dist = float('inf')
        for neighbor in self.get_neighbors(head):
            if (neighbor not in self.snake[1:-1] and 
                0 <= neighbor[0] < WIDTH and 
                0 <= neighbor[1] < HEIGHT):
                dist = self.heuristic(neighbor, tail)
                if dist < min_dist:
                    min_dist = dist
                    best_neighbor = neighbor
        return best_neighbor

    def get_safe_next_step(self, head, target):
        x, y = head
        tx, ty = target
        possible_steps = [
            ((x + GRID_SIZE, y), RIGHT),
            ((x - GRID_SIZE, y), LEFT),
            ((x, y + GRID_SIZE), DOWN),
            ((x, y - GRID_SIZE), UP)
        ]
        
        valid_steps = []
        for next_pos, direction in possible_steps:
            if (0 <= next_pos[0] < WIDTH and 
                0 <= next_pos[1] < HEIGHT and 
                next_pos not in self.snake):
                dist = self.heuristic(next_pos, target)
                valid_steps.append((dist, next_pos, direction))
        
        if valid_steps:
            valid_steps.sort()
            return valid_steps[0][1]  # next_pos
        return None

    def find_closest_path_index(self, head):
        """Finde den Index im Pfad, der der aktuellen Kopfposition am n√§chsten ist."""
        min_dist = float('inf')
        closest_index = 0
        for i, pos in enumerate(self.path):
            dist = self.heuristic(head, pos)
            if dist < min_dist:
                min_dist = dist
                closest_index = i
        return closest_index

    def move(self):
        if self.auto_mode:
            self.auto_move()
        else:
            self.manual_move()

    def auto_move(self):
        if len(self.snake) >= ROWS * COLS or self.game_over:
            self.game_over = True
            self.save_highscores()
            self.save_coverage_history()
            return

        head = self.snake[0]
        COVER_THRESHOLD = 100

        if not self.safe_mode:
            # Aggressiver Modus: Zum Futter gehen
            path_to_food = self.a_star(head, self.food)
            if path_to_food and len(path_to_food) > 1:
                new_head = path_to_food[1]
            else:
                new_head = self.get_safe_next_step(head, self.food)
            if not new_head:
                new_head = self.follow_tail(head)
        else:
            # Sicherer Modus: Systematischen Pfad folgen
            next_path_pos = self.path[(self.path_index + 1) % len(self.path)]
            new_head = self.get_safe_next_step(head, next_path_pos)
            if new_head:
                self.path_index = (self.path_index + 1) % len(self.path)
            else:
                # Fallback: Zum Futter oder Schwanz gehen
                new_head = self.get_safe_next_step(head, self.food)
                if not new_head:
                    new_head = self.follow_tail(head)

        # Pr√ºfen, ob Bewegung g√ºltig ist
        if not new_head or new_head == head or new_head in self.snake:
            print(f"Game Over bei Score {self.score}: new_head={new_head}, head={head}, in snake={new_head in self.snake}")
            self.game_over = True
            self.save_highscores()
            self.save_coverage_history()
            return

        self.snake.insert(0, new_head)

        if new_head == self.food:
            self.score += 1
            self.food = self.spawn_food()
            self.max_length = max(self.max_length, len(self.snake))
            if self.score == COVER_THRESHOLD and not self.safe_mode:
                self.safe_mode = True
                self.path_index = self.find_closest_path_index(head)
                print(f"√úbergang zum sicheren Modus bei {self.score} Punkten, path_index={self.path_index}")
        else:
            self.snake.pop()

    def manual_move(self):
        head_x, head_y = self.snake[0]
        dx, dy = self.direction
        new_head = (head_x + dx * GRID_SIZE, head_y + dy * GRID_SIZE)

        if (new_head[0] < 0 or new_head[0] >= WIDTH or
            new_head[1] < 0 or new_head[1] >= HEIGHT or
            new_head in self.snake):
            self.game_over = True
            self.save_highscores()
            self.save_coverage_history()
            return

        self.snake.insert(0, new_head)

        if new_head == self.food:
            self.food = self.spawn_food()
            self.score += 1
            self.max_length = max(self.max_length, len(self.snake))
        else:
            self.snake.pop()

    def draw_text(self, text, x, y, size=24, color=WHITE):
        font = pygame.font.Font(None, size)
        text_surface = font.render(text, True, color)
        self.screen.blit(text_surface, (x, y))

    def render(self):
        self.screen.fill(BLACK)
        for segment in self.snake:
            pygame.draw.rect(self.screen, GREEN, (*segment, GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(self.screen, RED, (*self.food, GRID_SIZE, GRID_SIZE))

        self.draw_text(f"Punkte: {self.score}", 10, 10, 24, WHITE)
        self.draw_text(f"Durchschn. Deckung (letzte 10): {self.get_average_coverage():.1f}%", 10, 40, 20, GREEN)
        self.draw_text("Top 5 High-Scores:", WIDTH - 200, 10, 24, YELLOW)
        for i, score in enumerate(self.highscores):
            self.draw_text(f"{i+1}. {score}", WIDTH - 200, 40 + i * 20, 20, YELLOW)

        if self.game_over:
            self.draw_text("Game Over!", WIDTH // 2 - 60, HEIGHT // 3, 32, WHITE)
            pygame.draw.rect(self.screen, YELLOW, self.restart_button_rect)
            self.draw_text("Neustart", WIDTH // 2 - 40, HEIGHT // 2 + 70, 22, BLACK)

        pygame.display.flip()

    def show_start_screen(self):
        self.screen.fill(BLACK)
        self.draw_text("Snake Game", WIDTH // 2 - 50, HEIGHT // 3, 32, WHITE)
        self.draw_text("W√§hle einen Modus:", WIDTH // 2 - 80, HEIGHT // 2 - 70, 24, WHITE)

        pygame.draw.rect(self.screen, BLUE, self.manual_button_rect)
        self.draw_text("Manueller Modus", WIDTH // 2 - 80, HEIGHT // 2 - 30, 22, WHITE)

        pygame.draw.rect(self.screen, GREEN, self.auto_button_rect)
        self.draw_text("Auto-Solve Modus", WIDTH // 2 - 80, HEIGHT // 2 + 20, 22, WHITE)

        pygame.display.flip()

    def run(self):
        in_start_screen = True
        while True:
            while in_start_screen:
                self.show_start_screen()
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        return
                    if event.type == pygame.MOUSEBUTTONDOWN:
                        if self.manual_button_rect.collidepoint(event.pos):
                            self.auto_mode = False
                            in_start_screen = False
                        elif self.auto_button_rect.collidepoint(event.pos):
                            self.auto_mode = True
                            in_start_screen = False

            while self.running:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        return
                    if not self.auto_mode and event.type == pygame.KEYDOWN:
                        if event.key in (pygame.K_w, pygame.K_UP) and self.direction != DOWN:
                            self.direction = UP
                        elif event.key in (pygame.K_s, pygame.K_DOWN) and self.direction != UP:
                            self.direction = DOWN
                        elif event.key in (pygame.K_a, pygame.K_LEFT) and self.direction != RIGHT:
                            self.direction = LEFT
                        elif event.key in (pygame.K_d, pygame.K_RIGHT) and self.direction != LEFT:
                            self.direction = RIGHT
                    if self.game_over and event.type == pygame.MOUSEBUTTONDOWN:
                        if self.restart_button_rect.collidepoint(event.pos):
                            self.reset_game()
                            break

                if not self.game_over:
                    self.move()
                self.render()
                self.clock.tick(10)

        pygame.quit()

if __name__ == "__main__":
    game = SnakeGame()
    game.run()